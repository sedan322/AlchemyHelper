from itertools import combinations
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import re
from PyQt5.QtGui import QPixmap, QIcon
from PyQt5.QtWidgets import QCheckBox, QLayout, QLabel

text_style = 'font: normal 14px Arial'


class Ui_MainWindow(object):

    def __init__(self, parent=None):
        # Создаем список для хранения чекбоксов
        self.checkboxes = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")

        MainWindow.setFixedSize(860, 555)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        MainWindow.setWindowIcon(QIcon('ico.png'))

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 40, 840, 510))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")

        self.groupBox = QtWidgets.QGroupBox(self.tab)
        self.groupBox.setGeometry(QtCore.QRect(20, 40, 300, 385))
        self.groupBox.setObjectName("groupBox")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(9, 19, 281, 351))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(340, 430, 400, 32))
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet(text_style)
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(30, 430, 80, 40))
        self.label_3.setObjectName("label_3")
        self.label_3.setStyleSheet(text_style)

        self.comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.comboBox.setMaxVisibleItems(20)
        self.comboBox.setObjectName("comboBox")
        self.verticalLayout.addWidget(self.comboBox)
        self.listWidget = QtWidgets.QListWidget(self.verticalLayoutWidget)
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout.addWidget(self.listWidget)
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(10, 10, 381, 16))
        self.label.setObjectName("label")

        self.groupBox_2 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_2.setGeometry(QtCore.QRect(325, 40, 300, 385))
        self.groupBox_2.setObjectName("groupBox_2")

        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(9, 19, 281, 351))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.label_5 = QtWidgets.QLabel(self.tab)
        self.label_5.setGeometry(QtCore.QRect(580, 80, 280, 280))
        self.label_5.setObjectName("label_5")

        pixmap = QPixmap("logo.png")
        pixmap = pixmap.scaled(280, 280)
        self.label_5.setPixmap(pixmap)

        self.comboBox_2 = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.comboBox_2.setMaxVisibleItems(20)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("Водное дыхание")
        self.comboBox_2.addItem("Восстановление запаса сил")
        self.comboBox_2.addItem("Восстановление здоровья")
        self.comboBox_2.addItem("Восстановление магии")
        self.comboBox_2.addItem("Исцеление болезней")
        self.comboBox_2.addItem("Невидимость")
        self.comboBox_2.addItem("Повышение запаса сил")
        self.comboBox_2.addItem("Повышение здоровья")
        self.comboBox_2.addItem("Повышение навыка: стрельба")
        self.comboBox_2.addItem("Повышение искусства торговли")
        self.comboBox_2.addItem("Повышение магии")
        self.comboBox_2.addItem("Повышение навыка: блокирование")
        self.comboBox_2.addItem("Повышение навыка: взлом")
        self.comboBox_2.addItem("Повышение навыка: восстановление")
        self.comboBox_2.addItem("Повышение навыка: двуручное оружие")
        self.comboBox_2.addItem("Повышение навыка: зачарование")
        self.comboBox_2.addItem("Повышение навыка: изменение")
        self.comboBox_2.addItem("Повышение навыка: иллюзия")
        self.comboBox_2.addItem("Повышение навыка: карманные кражи")
        self.comboBox_2.addItem("Повышение навыка: колдовство")
        self.comboBox_2.addItem("Повышение навыка: кузнечное дело")
        self.comboBox_2.addItem("Повышение навыка: легкая броня")
        self.comboBox_2.addItem("Повышение навыка: одноручное оружие")
        self.comboBox_2.addItem("Повышение навыка: разрушение")
        self.comboBox_2.addItem("Повышение навыка: скрытность")
        self.comboBox_2.addItem("Повышение навыка: тяжелая броня")
        self.comboBox_2.addItem("Повышение переносимого веса")
        self.comboBox_2.addItem("Регенерация запаса сил")
        self.comboBox_2.addItem("Регенерация здоровья")
        self.comboBox_2.addItem("Регенерация магии")
        self.comboBox_2.addItem("Сопротивление магии")
        self.comboBox_2.addItem("Сопротивление огню")
        self.comboBox_2.addItem("Сопротивление холоду")
        self.comboBox_2.addItem("Сопротивление электричеству")
        self.comboBox_2.addItem("Сопротивление ядам")
        self.comboBox_2.addItem("Бешенство")
        self.comboBox_2.addItem("Замедление")
        self.comboBox_2.addItem("Затяжной урон запасу сил")
        self.comboBox_2.addItem("Затяжной урон здоровью")
        self.comboBox_2.addItem("Затяжной урон магии")
        self.comboBox_2.addItem("Опустошение запаса сил")
        self.comboBox_2.addItem("Опустошение здоровья")
        self.comboBox_2.addItem("Опустошение магии")
        self.comboBox_2.addItem("Паралич")
        self.comboBox_2.addItem("Повреждение регенерации запаса сил")
        self.comboBox_2.addItem("Повреждение регенерации магии")
        self.comboBox_2.addItem("Страх")
        self.comboBox_2.addItem("Урон запасу сил")
        self.comboBox_2.addItem("Урон здоровью")
        self.comboBox_2.addItem("Урон магии")
        self.comboBox_2.addItem("Уязвимость к магии")
        self.comboBox_2.addItem("Уязвимость к огню")
        self.comboBox_2.addItem("Уязвимость к холоду")
        self.comboBox_2.addItem("Уязвимость к электричеству")
        self.comboBox_2.addItem("Уязвимость к яду")

        self.verticalLayout_2.addWidget(self.comboBox_2)
        self.listWidget_2 = QtWidgets.QListWidget(self.verticalLayoutWidget_2)
        self.listWidget_2.setObjectName("listWidget_2")
        self.verticalLayout_2.addWidget(self.listWidget_2)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.groupBox_3 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_3.setGeometry(QtCore.QRect(20, 40, 251, 385))
        self.groupBox_3.setObjectName("groupBox_3")

        self.scroll_area = QtWidgets.QScrollArea(self.groupBox_3)
        self.scroll_area.setGeometry(QtCore.QRect(10, 20, 231, 355))
        self.scroll_area.setWidgetResizable(True)

        self.verticalLayoutWidget_3 = QtWidgets.QWidget(MainWindow)
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.scroll_area.setWidget(self.verticalLayoutWidget_3)

        self.checkBox_5 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_5.setGeometry(QtCore.QRect(30, 10, 91, 17))
        self.checkBox_5.setObjectName("checkBox_5")

        self.pushButton = QtWidgets.QPushButton(self.tab_2)
        self.pushButton.setGeometry(QtCore.QRect(120, 10, 141, 21))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.search_recipe)

        self.radioButton = QtWidgets.QRadioButton(self.tab_2)
        self.radioButton.setGeometry(QtCore.QRect(350, 20, 82, 17))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.tab_2)
        self.radioButton_2.setGeometry(QtCore.QRect(450, 20, 101, 17))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.tab_2)
        self.radioButton_3.setGeometry(QtCore.QRect(550, 20, 101, 17))
        self.radioButton_3.setObjectName("radioButton_3")

        self.radioButton.clicked.connect(self.search_recipe)
        self.radioButton_2.clicked.connect(self.search_recipe)
        self.radioButton_3.clicked.connect(self.search_recipe)

        self.groupBox_4 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_4.setGeometry(QtCore.QRect(280, 40, 540, 385))
        self.groupBox_4.setObjectName("groupBox_4")
        self.listWidget_3 = QtWidgets.QListWidget(self.groupBox_4)
        self.listWidget_3.setGeometry(QtCore.QRect(15, 21, 510, 351))
        self.listWidget_3.setObjectName("listWidget_3")
        self.tabWidget.addTab(self.tab_2, "")

        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setGeometry(QtCore.QRect(20, 410, 940, 90))
        self.label_4.setObjectName("label_4")
        font = QtGui.QFont()
        font.setFamily("Rockwell Condensed")
        font.setPointSize(20)
        self.label_4.setFont(font)

        self.label_5 = QtWidgets.QLabel(self.tab_2)
        self.label_5.setGeometry(QtCore.QRect(300, 423, 940, 90))
        self.label_5.setObjectName("label_5")
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)

        self.label_6 = QtWidgets.QLabel(self.tab_2)
        self.label_6.setGeometry(QtCore.QRect(300, 394, 940, 90))
        self.label_6.setObjectName("label_6")
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)

        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(75, 13, 90, 17))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.setStyleSheet(text_style)

        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(170, 13, 81, 17))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.setStyleSheet(text_style)

        self.checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(258, 13, 99, 17))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.setStyleSheet(text_style)

        self.checkBox_4 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_4.setGeometry(QtCore.QRect(10, 13, 61, 17))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.setStyleSheet(text_style)

        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.items_dict = {
            'Абесинский окунь': ['Уязвимость к холоду', 'Повышение навыка: скрытность', 'Уязвимость к яду', 'Повышение навыка: разрушение'],
            'Алый корень Нирна': ['Урон здоровью', 'Урон запасу сил', 'Невидимость', 'Сопротивление магии'],
            'Белянка': ['Уязвимость к холоду', 'Повышение навыка: тяжелая броня', 'Восстановление магии', 'Опустошение магии'],
            'Бесовский гриб': ['Урон здоровью', 'Затяжной урон здоровью', 'Паралич', 'Восстановление здоровья'],
            'Болотный стручок': ['Сопротивление электричеству', 'Затяжной урон магии', 'Паралич', 'Восстановление здоровья'],
            'Бойцовая рыбка': ['Урон здоровью', 'Повышение навыка: изменение', 'Замедление', 'Увеличение грузоподъемности'],
            'Большие рога': ['Восстановление запаса сил', 'Повышение запаса сил', 'Замедление', 'Повреждение регенерации запаса сил'],
            'Бородатый мох': ['Урон магии', 'Повышение здоровья', 'Повреждение регенерации магии', 'Повышение навыка: одноручное оружие'],
            'Вересковое сердце': ['Восстановление магии', 'Повышение навыка: блокирование', 'Паралич', 'Повышение магии'],
            'Ветка чертополоха': ['Сопротивление холоду', 'Опустошение запаса сил', 'Сопротивление ядам', 'Повышение навыка: тяжелая броня'],
            'Виноград Джазби': ['Уязвимость к магии', 'Повышение магии', 'Регенерация магии', 'Опустошение здоровья'],
            'Гигантский лишайник': ['Уязвимость к электричеству', 'Опустошение здоровья', 'Уязвимость к яду', 'Восстановление магии'],
            'Глаз саблезуба': ['Восстановление запаса сил', 'Опустошение здоровья', 'Урон магии', 'Восстановление здоровья'],
            'Гниль Намиры': ['Урон магии', 'Повышение навыка: взлом', 'Страх', 'Регенерация здоровья'],
            'Голубой горноцвет': ['Восстановление здоровья', 'Повышение навыка: колдовство', 'Повышение здоровья', 'Повреждение регенерации магии'],
            'Двемерское масло': ['Уязвимость к магии', 'Повышение навыка: иллюзия', 'Регенерация магии', 'Восстановление магии'],
            'Жемчужина': ['Восстановление запаса сил', 'Повышение навыка: блокирование', 'Восстановление магии', 'Сопротивление электричеству'],
            'Живица сприггана': ['Повреждение регенерации магии', 'Повышение навыка: зачарование', 'Повышение навыка: кузнечное дело', 'Повышение навыка: изменение'],
            'Жир тролля': ['Сопротивление ядам', 'Повышение навыка: двуручное оружие', 'Бешенство', 'Урон здоровью'],
            'Зубы ледяного привидения': ['Уязвимость к холоду', 'Повышение навыка: тяжелая броня', 'Невидимость', 'Уязвимость к огню'],
            'Икра рыбы-убийцы': ['Сопротивление ядам', 'Повышение навыка: карманные кражи', 'Затяжной урон здоровью', 'Повышение запаса сил'],
            'Клык саблезуба': ['Восстановление запаса сил', 'Повышение навыка: тяжелая броня', 'Повышение навыка: кузнечное дело', 'Уязвимость к яду'],
            'Клюв ястреба': ['Восстановление запаса сил', 'Сопротивление холоду', 'Повышение переносимого веса', 'Сопротивление электричеству'],
            'Коготь ворожеи': ['Сопротивление магии', 'Затяжной урон магии', 'Повышение навыка: зачарование', 'Повышение искусства торговли'],
            'Корень Нирна': ['Урон здоровью', 'Урон запасу сил', 'Невидимость', 'Сопротивление магии'],
            'Костная мука': ['Урон запасу сил', 'Сопротивление огню', 'Повышение навыка: колдовство', 'Опустошение запаса сил'],
            'Красный горноцвет': ['Восстановление магии', 'Опустошение магии', 'Повышение магии', 'Урон здоровью'],
            'Кровавый венец': ['Уязвимость к огню', 'Повышение навыка: блокирование', 'Уязвимость к яду', 'Сопротивление магии'],
            'Крыло лунного мотылька': ['Урон магии', 'Повышение навыка: легкая броня', 'Регенерация здоровья', 'Невидимость'],
            'Крыло монарха': ['Восстановление здоровья', 'Повышение искусства торговли', 'Затяжной урон запасу сил', 'Урон магии'],
            'Крыло синей бабочки': ['Урон запасу сил', 'Повышение навыка: колдовство', 'Повреждение регенерации магии', 'Повышение навыка: зачарование'],
            'Куриное яйцо': ['Сопротивление магии', 'Повреждение регенерации магии', 'Водное дыхание', 'Затяжной урон запасу сил'],
            'Лаванда': ['Сопротивление магии', 'Повышение запаса сил', 'Опустошение магии', 'Повышение навыка: колдовство'],
            'Лиловый горноцвет': ['Восстановление запаса сил', 'Повышение навыка: скрытность', 'Затяжной урон магии', 'Сопротивление холоду'],
            'Лунный сахар': ['Уязвимость к огню', 'Сопротивление холоду', 'Восстановление магии', 'Регенерация магии'],
            'Лютый гриб': ['Урон запасу сил', 'Бешенство', 'Восстановление здоровья', 'Повышение навыка: кузнечное дело'],
            'Маленькая жемчужина': ['Восстановление запаса сил', 'Повышение навыка: одноручное оружие', 'Повышение навыка: восстановление', 'Сопротивление холоду'],
            'Маленькие рога': ['Уязвимость к яду', 'Повышение навыка: восстановление', 'Затяжной урон запасу сил', 'Урон здоровью'],
            'Медвежьи когти': ['Восстановление запаса сил', 'Повышение здоровья', 'Повышение навыка: одноручное оружие', 'Повреждение регенерации магии'],
            'Медовые соты': ['Восстановление запаса сил', 'Повышение навыка: блокирование', 'Повышение навыка: легкая броня', 'Опустошение запаса сил'],
            'Мора Тапинелла': ['Восстановление магии', 'Затяжной урон здоровью', 'Регенерация запаса сил', 'Повышение навыка: иллюзия'],
            'Морозная Мириам': ['Сопротивление холоду', 'Повышение навыка: скрытность', 'Опустошение магии', 'Повреждение регенерации запаса сил'],
            'Морозная соль': ['Уязвимость к огню', 'Сопротивление холоду', 'Восстановление магии', 'Повышение навыка: колдовство'],
            'Морской желудь': ['Урон магии', 'Водное дыхание', 'Регенерация здоровья', 'Повышение навыка: карманные кражи'],
            'Мухомор': ['Сопротивление огню', 'Повышение навыка: двуручное оружие', 'Бешенство', 'Регенерация запаса сил'],
            'Огненная соль': ['Уязвимость к холоду', 'Сопротивление огню', 'Восстановление магии', 'Регенерация магии'],
            'Оранжевая стрекоза': ['Восстановление запаса сил', 'Опустошение магии', 'Повышение навыка: карманные кражи', 'Затяжной урон здоровью'],
            'Палец великана': ['Урон запасу сил', 'Повышение здоровья', 'Повышение переносимого веса', 'Повреждение регенерации запаса сил'],
            'Паслен': ['Урон здоровью', 'Повреждение регенерации магии', 'Затяжной урон запасу сил', 'Повышение навыка: разрушение'],
            'Паучье яйцо': ['Урон запасу сил', 'Повреждение регенерации магии', 'Повышение навыка: взлом', 'Повышение навыка: стрельба'],
            'Пелена дымка': ['Восстановление запаса сил', 'Повышение навыка: разрушение', 'Повышение переносимого веса', 'Сопротивление магии'],
            'Перья ворожеи': ['Урон магии', 'Повышение навыка: колдовство', 'Бешенство', 'Уязвимость к электричеству'],
            'Перья ястреба': ['Исцеление болезней', 'Повышение навыка: легкая броня', 'Повышение навыка: одноручное оружие', 'Повышение навыка: скрытность'],
            'Ползучая лоза': ['Восстановление магии', 'Повреждение регенерации запаса сил', 'Повышение переносимого веса', 'Уязвимость к магии'],
            'Прах Берита': ['Урон запасу сил', 'Сопротивление огню', 'Повышение навыка: колдовство', 'Опустошение запаса сил'],
            'Прах вампира': ['Невидимость', 'Восстановление магии', 'Регенерация здоровья', 'Исцеление болезней'],
            'Пушица': ['Сопротивление магии', 'Повышение магии', 'Повышение навыка: блокирование', 'Повышение искусства торговли'],
            'Пчела': ['Восстановление запаса сил', 'Опустошение запаса сил', 'Регенерация запаса сил', 'Уязвимость к электричеству'],
            'Пчелиное гнездо': ['Сопротивление ядам', 'Повышение навыка: легкая броня', 'Повышение навыка: скрытность', 'Повышение навыка: разрушение'],
            'Пшеница': ['Восстановление здоровья', 'Повышение здоровья', 'Повреждение регенерации запаса сил', 'Затяжной урон магии'],
            'Светящаяся пыль': ['Урон магии', 'Повреждение регенерации магии', 'Повышение навыка: разрушение', 'Сопротивление электричеству'],
            'Светящийся гриб': ['Сопротивление электричеству', 'Повышение навыка: разрушение', 'Повышение навыка: кузнечное дело', 'Повышение здоровья'],
            'Сердце даэдра': ['Восстановление здоровья', 'Повреждение регенерации запаса сил', 'Урон магии', 'Страх'],
            'Серебристый окунь': ['Восстановление запаса сил', 'Повреждение регенерации запаса сил', 'Опустошение здоровья', 'Сопротивление холоду'],
            'Синяя стрекоза': ['Сопротивление электричеству', 'Повышение навыка: карманные кражи', 'Восстановление здоровья', 'Страх'],
            'Сиродильский лопатохвост': ['Урон запасу сил', 'Повышение навыка: восстановление', 'Страх', 'Опустошение здоровья'],
            'Снежные ягоды': ['Сопротивление огню', 'Повышение навыка: зачарование', 'Сопротивление холоду', 'Сопротивление электричеству'],
            'Собачий корень': ['Урон запасу сил', 'Повышение навыка: одноручное оружие', 'Повышение навыка: стрельба', 'Паралич'],
            'Соль пустоты': ['Уязвимость к электричеству', 'Сопротивление магии', 'Урон здоровью', 'Повышение магии'],
            'Соль': ['Уязвимость к магии', 'Повышение навыка: восстановление', 'Замедление', 'Регенерация магии'],
            'Стержневой корень': ['Уязвимость к магии', 'Повышение навыка: иллюзия', 'Регенерация магии', 'Восстановление магии'],
            'Толченый бивень мамонта': ['Восстановление запаса сил', 'Повышение навыка: скрытность', 'Уязвимость к огню', 'Страх'],
            'Торакс светлячка': ['Восстановление запаса сил', 'Затяжной урон магии', 'Уязвимость к магии', 'Повышение запаса сил'],
            'Травяной стручок': ['Сопротивление ядам', 'Опустошение магии', 'Повышение навыка: изменение', 'Восстановление магии'],
            'Ухо фалмера': ['Урон здоровью', 'Бешенство', 'Сопротивление ядам', 'Повышение навыка: взлом'],
            'Хвост злокрыса': ['Повреждение регенерации запаса сил', 'Опустошение здоровья', 'Урон здоровью', 'Повышение навыка: легкая броня'],
            'Хисткарп': ['Восстановление запаса сил', 'Повышение магии', 'Повреждение регенерации запаса сил', 'Водное дыхание'],
            'Клешня грязевого краба': ['Восстановление запаса сил', 'Исцеление болезней', 'Сопротивление ядам', 'Сопротивление огню'],
            'Человеческое сердце': ['Урон здоровью', 'Урон магии', 'Повреждение регенерации магии', 'Бешенство'],
            'Человечье мясо': ['Урон здоровью', 'Паралич', 'Восстановление магии', 'Повышение навыка: скрытность'],
            'Чеснок': ['Сопротивление ядам', 'Повышение запаса сил', 'Регенерация магии', 'Регенерация здоровья'],
            'Чешуйчатка': ['Уязвимость к магии', 'Повышение навыка: иллюзия', 'Регенерация запаса сил', 'Повышение переносимого веса'],
            'Чешуя рыбы-убийцы': ['Сопротивление холоду', 'Затяжной урон здоровью', 'Повышение навыка: тяжелая броня', 'Повышение навыка: блокирование'],
            'Жареная злокрысья кожа': ['Восстановление запаса сил', 'Исцеление болезней', 'Сопротивление ядам', 'Восстановление здоровья'],
            'Эктоплазма': ['Восстановление магии', 'Повышение навыка: разрушение', 'Повышение магии', 'Урон здоровью'],
            'Эльфийское ухо': ['Восстановление магии', 'Повышение навыка: стрельба', 'Уязвимость к холоду', 'Сопротивление огню'],
            'Ягоды можжевельника': ['Уязвимость к огню', 'Повышение навыка: стрельба', 'Регенерация здоровья', 'Повреждение регенерации запаса сил'],
            'Ядовитый колокольчик': ['Урон здоровью', 'Опустошение запаса сил', 'Замедление', 'Уязвимость к яду'],
            'Язык дракона': ['Сопротивление огню', 'Повышение искусства торговли', 'Повышение навыка: иллюзия', 'Повышение навыка: двуручное оружие'],
            'Яйцо коруса': ['Уязвимость к яду', 'Повышение запаса сил', 'Урон магии', 'Невидимость'],
            'Яйцо оригмы': ['Восстановление здоровья', 'Повышение навыка: одноручное оружие', 'Урон запасу сил', 'Уязвимость к магии'],
            'Яйцо соснового дрозда': ['Восстановление запаса сил', 'Повышение навыка: взлом', 'Уязвимость к яду', 'Сопротивление электричеству'],
            'Желтый горноцвет': ['Сопротивление ядам', 'Повышение навыка: восстановление', 'Повреждение регенерации запаса сил', 'Повышение здоровья', ],
            'Крыло мотылька предка': ['Урон запасу сил', 'Повышение навыка: колдовство', 'Повреждение регенерации магии', 'Повышение навыка: зачарование', ],
            'Светящийся цветок': ['Сопротивление магии', 'Страх', 'Регенерация здоровья', 'Паралич'],
            'Усик коруса-охотника': ['Урон запасу сил', 'Повышение навыка: колдовство', 'Повреждение регенерации магии', 'Повышение навыка: зачарование'],
            'Ядовитый цветок': ['Урон здоровью', 'Страх', 'Повышение переносимого веса', 'Замедление'],
            'Лососевая икра': ['Водное дыхание', 'Повышение магии', 'Регенерация магии', 'Восстановление запаса сил'],
            'Яйцо ястреба': ['Сопротивление магии', 'Водное дыхание', 'Повреждение регенерации магии', 'Затяжной урон запасу сил'],
            'Вредозобник': ['Опустошение здоровья', 'Опустошение запаса сил', 'Опустошение магии', 'Затяжной урон здоровью'],
            'Древесина горелого сприггана': ['Уязвимость к огню', 'Повышение навыка: изменение', 'Повреждение регенерации магии', 'Замедление'],
            'Желе нетча': ['Паралич', 'Повышение переносимого веса', 'Восстановление запаса сил', 'Страх'],
            'Желе пепельного прыгуна': ['Восстановление здоровья', 'Повышение навыка: легкая броня', 'Сопротивление электричеству', 'Уязвимость к холоду'],
            'Императорский зонтичный мох': ['Урон здоровью', 'Повышение магии', 'Регенерация здоровья', 'Повышение навыка: двуручное оружие'],
            'Кабаний клык': ['Повышение запаса сил', 'Повышение здоровья', 'Повышение навыка: блокирование', 'Бешенство'],
            'Корень трамы': ['Уязвимость к электричеству', 'Повышение переносимого веса', 'Урон магии', 'Замедление'],
            'Пепел порождения': ['Опустошение запаса сил', 'Сопротивление огню', 'Повышение навыка: зачарование', 'Опустошение магии'],
            'Пепельная ползучая лоза': ['Урон запасу сил', 'Невидимость', 'Сопротивление огню', 'Повышение навыка: разрушение'],
            'Перья фельсадской крачки': ['Восстановление здоровья', 'Повышение навыка: легкая броня', 'Исцеление болезней', 'Сопротивление магии'],
            'Стручок пепельной травы': ['Сопротивление огню', 'Уязвимость к электричеству', 'Повышение навыка: взлом', 'Повышение навыка: скрытность'],
            'Измельченная соль пустоты': ['Уязвимость к электричеству', 'Сопротивление магии', 'Урон здоровью', 'Повышение магии'],
            'Корень жарницы': ['Урон здоровью', 'Урон магии', 'Урон запасу сил', 'Повреждение регенерации магии'],
            'Морозная соль Фаренгара': ['Уязвимость к огню', 'Сопротивление холоду', 'Восстановление магии', 'Повышение навыка: колдовство']

        }
        self.effect_descripton = {
            'Восстановление здоровья': ['Моментально восстанавливает запас здоровье'],
            'Восстановление магии': ['Моментально восстанавливает запас магии'],
            'Восстановление запаса сил': ['Моментально восстанавливает запас сил'],

            'Повышение здоровья': ['Увеличивает запас здоровья на несколько секунд'],
            'Повышение магии': ['Увеличивает запас магии на несколько секунд'],
            'Повышение запаса сил': ['Увеличивает запас сил на несколько секунд'],

            'Регенерация здоровья': ['Здоровье восстанавливается быстрее\nв течение нескольких секунд'],
            'Регенерация магии': ['Магия восстанавливается быстрее\nв течение нескольких секунд'],
            'Регенерация запаса сил': ['Запас сил восстанавливается быстрее\nв течение нескольких секунд'],

            'Сопротивление огню': ['Нейтрализует процент огненного урона\nна несколько секунд'],
            'Сопротивление холоду': ['Нейтрализует процент от урона холода\nна несколько секунд'],
            'Сопротивление электричеству': ['Нейтрализует процент урона от электричества\nна несколько секунд'],
            'Сопротивление магии': ['Нейтрализует процент магического урона\nна несколько секунд'],
            'Сопротивление ядам': ['Нейтрализует процент урона от яда\nна несколько секунд'],

            'Исцеление болезней': ['Устраняет практически все болезни,\nотравление и временные магические эффекты'],
            'Водное дыхание': ['Владелец получает способность \nдышать под водой в течение нескольких секунд'],
            'Невидимость': ['Придает невидимость на несколько секунд'],

            'Повышение навыка: стрельба': ['Оружие дальнего боя наносит больше урона\nв течение нескольких секунд'],
            'Повышение навыка: блокирование': ['При блокировке поглощается \nбольше урона, действует нескольких секунд'],
            'Повышение навыка: взлом': ['Взлом облегчается в течение нескольких секунд'],
            'Повышение навыка: восстановление': ['Заклинания восстановления расходуют меньше магии\nв течение нескольких секунд'],
            'Повышение навыка: двуручное оружие': ['Двуручное оружие наносит\nбольше урона в течение нескольких секунд'],
            'Повышение навыка: зачарование': ['В течении нескольких секунд\nзачарованные предметы мощнее'],
            'Повышение навыка: изменение': ['Заклинания изменения расходуют\nменьше магии в течение нескольких секунд'],
            'Повышение навыка: иллюзия': ['Заклинания школы иллюзии расходуют\nменьше магии в течение нескольких секунд'],
            'Повышение навыка: карманные кражи': ['Карманные кражи облегчаются\nв течение нескольких секунд'],
            'Повышение навыка: колдовство': ['Заклинания школы колдовства расходуют\nменьше магии в течение нескольких секунд'],
            'Повышение навыка: кузнечное дело': ['Навык улучшение оружия и брони увеличивается'],
            'Повышение навыка: легкая броня': ['Увеличивает показатель легкой брони\nна несколько секунд'],
            'Повышение навыка: одноручное оружие': ['Одноручное оружие наносит\nбольше урона в течение нескольких секунд'],
            'Повышение навыка: разрушение': ['Заклинания школы разрушения дешевле\nв течение нескольких секунд'],
            'Повышение навыка: скрытность': ['Вас труднее обнаружить в течение нескольких секунд'],
            'Повышение навыка: тяжелая броня': ['Увеличивает показатель тяжелой брони\nна несколько секунд'],
            'Повышение искусства торговли': ['Цены становятся выгоднее\nв течение нескольких секунд'],
            'Повышение переносимого веса': ['Переносимый вес увеличивается\nв течение нескольких секунд'],

            'Урон здоровью': ['Мгновенно наносит урон ядом'],
            'Урон магии': ['Мгновенно отнимает запас магии у цели'],
            'Урон запасу сил': ['Мгновенно отнимает запас сил у цели'],

            'Затяжной урон здоровью': ['Вытягивает здоровье противника\nв течение нескольких секунд'],
            'Затяжной урон магии': ['Отнимает у цели несколько единиц магии в секунду,\nдействует несколько секунд'],
            'Затяжной урон запасу сил': ['Отнимает у цели несколько единиц запаса сил в секунду,\nдействует несколько секунд'],

            'Опустошение здоровья': ['Наносит противнику урон концентрированным ядом\nв течение нескольких секунд'],
            'Опустошение магии': ['Концентрированный яд отнимает магию цели\nв течение нескольких секунд'],
            'Опустошение запаса сил': ['Концентрированный яд отнимает несколько единиц\nзапаса сил в течение нескольких секунд'],

            'Повреждение регенерации магии': ['Снижает скорость восстановление магии\nв течение нескольких секунд'],
            'Повреждение регенерации запаса сил': ['Снижает скорость восстановление запаса сил\nв течение нескольких секунд'],

            'Уязвимость к огню': ['Цель уязвимее к огню в течение нескольких секунд'],
            'Уязвимость к холоду': ['Цель уязвимее к холоду в течение нескольких секунд'],
            'Уязвимость к электричеству': ['Цель уязвимее к электричеству\nв течение нескольких секунд'],
            'Уязвимость к магии': ['Цель уязвимее к магии в течение нескольких секунд'],
            'Уязвимость к яду': ['Цель уязвимее к ядам в течение нескольких секунд'],

            'Страх': ['Существа и люди\nобращаются в бегство на несколько секунд'],
            'Паралич': ['Цель парализуется на несколько секунд'],
            'Бешенство': ['Существа и люди\nатакуют всех подряд в течение нескольких секунд'],
            'Замедление': ['Существенно снижает скорость передвижения цели\nна несколько секунд'],
        }
        self.from_where = {
            'Skyrim': ['Абесинский окунь', 'Алый корень Нирна', 'Белянка', 'Бесовский гриб', 'Бойцовая рыбка',
            'Болотный стручок', 'Большие рога', 'Бородатый мох', 'Вересковое сердце', 'Ветка чертополоха', 'Виноград Джазби',
            'Гигантский лишайник', 'Глаз саблезуба', 'Гниль Намиры', 'Голубой горноцвет', 'Двемерское масло',
            'Жареная злокрысья кожа', 'Жемчужина', 'Живица сприггана', 'Жир тролля', 'Зубы ледяного привидения',
            'Икра рыбы-убийцы', 'Корень Нирна','Корень жарницы', 'Красный горноцвет', 'Клешня грязевого краба', 'Клык саблезуба',
            'Клюв ястреба', 'Коготь ворожеи', 'Костная мука', 'Кровавый венец', 'Крыло лунного мотылька',
            'Крыло монарха', 'Крыло синей бабочки', 'Куриное яйцо', 'Лаванда', 'Лиловый горноцвет', 'Лунный сахар',
            'Лютый гриб', 'Маленькая жемчужина', 'Маленькие рога', 'Медвежьи когти', 'Медовые соты', 'Мора Тапинелла',
            'Морозная Мириам', 'Морозная соль', 'Морской желудь', 'Мухомор', 'Огненная соль', 'Оранжевая стрекоза',
            'Палец великана', 'Паслен', 'Паучье яйцо', 'Пелена дымка', 'Перья ворожеи', 'Перья ястреба', 'Ползучая лоза',
            'Прах вампира', 'Пушица', 'Пчела', 'Пчелиное гнездо', 'Пшеница', 'Светящаяся пыль', 'Светящийся гриб',
            'Сердце даэдра', 'Серебристый окунь', 'Синяя стрекоза', 'Сиродильский лопатохвост', 'Снежные ягоды',
            'Собачий корень', 'Соль', 'Соль пустоты', 'Стержневой корень', 'Толченый бивень мамонта', 'Торакс светлячка',
            'Травяной стручок', 'Ухо фалмера', 'Хвост злокрыса', 'Хисткарп', 'Человеческое сердце', 'Человечье мясо',
            'Чеснок', 'Чешуйчатка', 'Чешуя рыбы-убийцы', 'Эктоплазма', 'Эльфийское ухо', 'Ягоды можжевельника',
            'Ядовитый колокольчик', 'Язык дракона', 'Яйцо коруса', 'Яйцо оригмы', 'Яйцо соснового дрозда'],

            'Dawnguard': ['Желтый горноцвет', 'Крыло мотылька предка', 'Светящийся цветок', 'Усик коруса-охотника',
            'Ядовитый цветок', 'Измельченная соль пустоты', 'Морозная соль Фаренгара', 'Прах Берита'],

            'Hearthfires': ['Лососевая икра', 'Яйцо ястреба'],

            'Dragonborn': ['Вредозобник', 'Древесина горелого сприггана', 'Желе нетча', 'Желе пепельного прыгуна',
            'Императорский зонтичный мох', 'Кабаний клык', 'Корень трамы', 'Пепел порождения', 'Пепельная ползучая лоза',
            'Перья фельсадской крачки', 'Стручок пепельной травы']
        }

        self.comboBox.currentIndexChanged.connect(self.updateList)
        self.comboBox_2.currentIndexChanged.connect(self.updateList2)
        self.checkBox_5.stateChanged.connect(self.on_checkBox_5_stateChanged)

        self.checkBox_4.stateChanged.connect(self.updateComboboxItems)
        self.checkBox.stateChanged.connect(self.updateComboboxItems)
        self.checkBox_2.stateChanged.connect(self.updateComboboxItems)
        self.checkBox_3.stateChanged.connect(self.updateComboboxItems)
        self.checkBox.setText("Dawnguard")
        self.checkBox.setChecked(True)
        self.checkBox_2.setText("Hearthfires")
        self.checkBox_2.setChecked(True)
        self.checkBox_3.setText("Dragonborn")
        self.checkBox_3.setChecked(True)
        self.checkBox_4.setText("Skyrim")
        self.checkBox_4.setChecked(True)
        ui.updateComboboxItems()
        self.listWidget_2.itemDoubleClicked.connect(self.selectItemInComboBox)
        self.listWidget.itemDoubleClicked.connect(self.selectItemInComboBox2)
        self.listWidget_3.itemClicked.connect(self.description_get)
        self.checkboxes = []

    # Выбор dlc
    def updateComboboxItems(self):
        selected_dlc = []
        if self.checkBox_4.isChecked():
            selected_dlc.append('Skyrim')
        if self.checkBox.isChecked():
            selected_dlc.append('Dawnguard')
        if self.checkBox_2.isChecked():
            selected_dlc.append('Hearthfires')
        if self.checkBox_3.isChecked():
            selected_dlc.append('Dragonborn')

        selected_items = []
        for dlc in selected_dlc:
            selected_items.extend(self.from_where[dlc])

        # Удаление существующих флажков перед добавлением новых
        for i in reversed(range(self.verticalLayout_3.count())):
            widget = self.verticalLayout_3.itemAt(i).widget()
            if isinstance(widget, QCheckBox):
                self.verticalLayout_3.removeWidget(widget)
                widget.setParent(None)

        self.comboBox.clear()
        self.comboBox.addItems(selected_items)

        # Очистка списка чекбоксов
        self.checkboxes.clear()

        for item in selected_items:
            try:
                checkbox = QCheckBox(item)
                self.verticalLayout_3.addWidget(checkbox)
                self.checkboxes.append(checkbox)
            except Exception as e:
                print(f"An error occurred while creating a checkbox: {e}")


    # Листбокс 1
    def updateList(self, index):
        self.label_3.clear()
        self.listWidget.clear()
        if self.comboBox.currentText():
            key = self.comboBox.currentText()
            items = self.items_dict.get(key)
            for item in items:
                self.listWidget.addItem(item)

                # Лейбл под листом
            if key is not None:
                for k, v in self.from_where.items():
                    if key in v:
                        key = k
                        self.label_3.setText(k)
            else:
                self.label_3.setText('Ингредиент не выбран')

    # Листбокс 2
    def updateList2(self, index):
        selected_item = self.comboBox_2.currentText()
        key = None
        self.listWidget_2.clear()
        for k, v in self.items_dict.items():
            if selected_item in v:
                key = k
                self.listWidget_2.addItem(key)

        description = self.effect_descripton.get(selected_item, [''])
        self.label_2.setText(description[0])

    def selectItemInComboBox(self, item):
        selected_item = item.text()
        for k, v in self.items_dict.items():
            if selected_item in k:
                self.comboBox.setCurrentIndex(self.comboBox.findText(selected_item))

    def selectItemInComboBox2(self, item):
        selected_item = item.text()
        for k, v in self.items_dict.items():
            if selected_item in v:
                self.comboBox_2.setCurrentIndex(self.comboBox_2.findText(selected_item))

    def get_related_items(item, items_dict):

        if item not in items_dict:
            return []
        return items_dict[item]

    # Вторая форма кнопка выбрать все
    def on_checkBox_5_stateChanged(self, state):
        if len(self.checkboxes) == 0:  # если список пустой
            self.updateComboboxItems()
        check_state = self.checkBox_5.checkState()
        for checkbox in self.checkboxes:
            checkbox.setCheckState(check_state)

    def search_recipe(self):
        selected_items = {}
        for checkbox in self.checkboxes:
            if checkbox.isChecked():
                selected_items[checkbox.text()] = self.items_dict[checkbox.text()]

        result = []
        used_items = []

        if self.radioButton.isChecked():
            for num_ingredients in [3, 2]:
                keys = list(selected_items.keys())

                for combination in combinations(keys, num_ingredients):
                    common_values = set(selected_items[combination[0]])
                    for key in combination[1:]:
                        common_values &= set(selected_items[key])
                    if len(common_values) > 0:
                        recipe = list(combination)
                        if recipe not in result:
                            if all(item not in used_items for item in recipe):
                                result.append(recipe)
                                used_items.extend(recipe)
        elif self.radioButton_2.isChecked():
            num_ingredients = 2
            keys = list(selected_items.keys())

            for combination in combinations(keys, num_ingredients):
                common_values = set(selected_items[combination[0]])
                for key in combination[1:]:
                    common_values &= set(selected_items[key])
                if len(common_values) > 0:
                    recipe = list(combination)
                    if recipe not in result:
                        if all(item not in used_items for item in recipe):
                            result.append(recipe)
                            used_items.extend(recipe)
        elif self.radioButton_3.isChecked():
            num_ingredients = 3
            keys = list(selected_items.keys())

            for combination in combinations(keys, num_ingredients):
                common_values = set(selected_items[combination[0]])
                for key in combination[1:]:
                    common_values &= set(selected_items[key])
                if len(common_values) > 0:
                    recipe = list(combination)
                    if recipe not in result:
                        if all(item not in used_items for item in recipe):
                            result.append(recipe)
                            used_items.extend(recipe)
        else:
            return

        self.listWidget_3.clear()
        if result:
            for recipe in result:
                self.listWidget_3.addItem(' + '.join(recipe))
        else:
            self.listWidget_3.addItem('Рецепты не найдены')

    def description_get(self, item):
        # Получение списка ключей из текста элемента
        keys = item.text().split(" + ")

        # Список для хранения повторяющихся элементов
        repeating_values = []

        # Множество для хранения уникальных элементов
        unique_values = set()

        # Проход по словарю items_dict
        for k, v in self.items_dict.items():
            if k in keys:
                # Поиск всех строк в кавычках в значении словаря
                matches = re.findall(r"'(.+?)'", str(v))
                for match in matches:
                    # Проверка на повторение значения
                    if match in unique_values:
                        # Добавление повторяющегося элемента в список
                        repeating_values.append(match)
                    else:
                        # Добавление уникального элемента в множество
                        unique_values.add(match)

        # Преобразование списка повторяющихся элементов в строку без кавычек
        values_list = list(set(repeating_values))
        if len(values_list) > 2:
            values_str = ", ".join(values_list[:2]) + "\n" + ", ".join(values_list[2:])
        else:
            values_str = ", ".join(values_list)

        # Вывод строки в label_5
        self.label_5.setText(values_str)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Alchemy Helper"))
        self.groupBox.setTitle(_translate("MainWindow", "Ингредиенты"))
        self.label.setText(_translate("MainWindow", "Двойной клик по элементу откроет о нем информацию в соседнем списке"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Эффекты"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Справка"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Ингредиенты"))

        self.checkBox_5.setText(_translate("MainWindow", "Выбрать все"))
        self.pushButton.setText(_translate("MainWindow", "Смешать"))
        self.radioButton.setText(_translate("MainWindow", "Все рецепты"))
        self.radioButton.setChecked(True)
        self.radioButton_2.setText(_translate("MainWindow", "2 ингредиента"))
        self.radioButton_3.setText(_translate("MainWindow", "3 ингредиента"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Рецепты"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Рецепты"))

        self.label_2.setText(_translate("MainWindow", 'None'))
        self.label_3.setText(_translate("MainWindow", "None"))
        self.label_4.setText(_translate("MainWindow", "<u>The Elder Scrolls: Skyrim</u><br>TES:S Alchemy Helper"))
        self.label_5.setText(_translate("MainWindow", ""))
        self.label_6.setText(_translate("MainWindow", "Зелье будет иметь эффект:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.updateList(0)
    ui.updateList2(0)
    MainWindow.show()
    sys.exit(app.exec_())
